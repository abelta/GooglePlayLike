// Generated by CoffeeScript 1.7.1

/**
 *
 */

(function() {
  var Collapsable, CollapsingHeaders, DomElement, NonCollapsable,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DomElement = (function() {

    /**
     * @constructor
     */
    function DomElement(dom) {
      this.dom = dom;
      this.move = __bind(this.move, this);
      console.log('DomElement#constructor');
      this.initialPosition = jQuery(this.dom).offset().top;
      this.topPosition = this.initialPosition;
      this.bottomPosition = this.topPosition + jQuery(this.dom).outerHeight();
    }


    /**
     *
     */

    DomElement.prototype.move = function(event) {
      console.log('DomElement#move');
      return console.log('event', event);
    };

    return DomElement;

  })();


  /**
   * Header that will be collapsed.
   * Collapsed headers are defined by one thing:
   * they will all collapse into the top of the document at the same time.
   */

  Collapsable = (function(_super) {
    __extends(Collapsable, _super);

    function Collapsable() {
      this.move = __bind(this.move, this);
      return Collapsable.__super__.constructor.apply(this, arguments);
    }


    /**
     *
     */

    Collapsable.prototype.move = function() {
      console.log('CollapsableHeader#move');
      Collapsable.__super__.move.apply(this, arguments);
      if (this.currentPosition === 0) {

      } else {

      }
    };

    return Collapsable;

  })(DomElement);


  /**
   *
   */

  NonCollapsable = (function(_super) {
    __extends(NonCollapsable, _super);

    function NonCollapsable() {
      this.move = __bind(this.move, this);
      return NonCollapsable.__super__.constructor.apply(this, arguments);
    }


    /**
     *
     */

    NonCollapsable.prototype.move = function() {
      NonCollapsable.__super__.move.apply(this, arguments);
      console.log('NonCollapsable@move');
      if (this.currentPosition === 0) {

      } else {

      }
    };

    return NonCollapsable;

  })(DomElement);


  /**
   * Main class
   */

  CollapsingHeaders = (function() {
    var domElements, scrollHandler;

    domElements = [];


    /**
     * @constructor
     */

    function CollapsingHeaders() {
      console.log('CollapsingHeaders#constructor');
      jQuery('.collapsable, .noncollapsable').each(function() {
        if (jQuery(this).is('.collapsable')) {
          return domElements.push(new Collapsable(this));
        } else if (jQuery(this).is('.noncollapsable')) {
          return domElements.push(new NonCollapsable(this));
        }
      });
      jQuery(window).on('scroll', scrollHandler);
      console.log('PASA');
    }

    scrollHandler = function(event) {
      var element, _i, _len, _results;
      console.log('CollapsingHeaders#scrollHandler');
      console.log(window.pageYOffset);
      console.log('domElements', domElements);
      _results = [];
      for (_i = 0, _len = domElements.length; _i < _len; _i++) {
        element = domElements[_i];
        _results.push(element.move(event));
      }
      return _results;
    };

    return CollapsingHeaders;

  })();


  /*
   * MAIN
   */

  new CollapsingHeaders;

}).call(this);
